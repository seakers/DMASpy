#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Implementation of a simple model for allocating flows on a hierachical basis.
system. Exogenous imputs are defined (i.e. Hydrological Inflows) as the main decision.
The simulation implements the flow allocations based on fixed policies. There is no optimisation.

Network structure:
Nodes:
    (R) : Reservoir
    (J) : Junction
    (F) : Farm
    (U) : Urban
    (E) : Out of system (Unutilised water)
    I   : Inflows


         (J1)
          |
          |
      I--(J2) 
          /\
         /  \  
  (U1)-(J3) (J4)
        |    |
       (F4) (J5)--(F1)
             |
            (J6)--(F2)
             |
            (J7)--(F3)
             |
            (Out)

          
Water should be allocated according to the following rules.
#J1 E.g. Transfer from source
1	100
2	100
3	100
4	100
5	110
6	120
7	140
8	140
9	140
10	120
11	100
12	100

 
#I Inflow to J2 E.g. hydrological inflow
1	120
2	200
3	300
4	250
5	180
6	200
7	180
8	185
9	200
10	200
11	145
12	280


#J2 Allocation rule (%to each)
  J3  J4
1	50	50
2	50	50
3	65	35
4	65	35
5	70	30
6	70	30
7	65	35
8	65	35
9	65	35
10	65	35
11	65	35
12	65	35

#J3
Allocate following to U1 and remainder to F4
U1 Allocation
1	90
2	100
3	100
4	120
5	140
6	140
7	140
8	140
9	120
10	120
11	100
12	100

#J4
Route to J5

#F1, F2, F3
Farmers 1,2,3 can have up to 33% of the water each. 
F2 and F3 can have more if allocation upstream is not utilised.

Agricultural Demand Table
	F1	F2	F3
1	85	65	60
2	80	65	60
3	80	65	65
4	80	70	80
5	60	70	85
6	60	80	85
7	50	90	90
8	50	80	45
9	50	80	60
10	60	80	60
11	65	80	70
12	65	80	70

#J5
Min(33% of J5, F1 demand)
Remainder to J6.

#J6
Min(50% of J6, F2 demand)
Remainder to J7.

#J7
Min(100% of J6, F3 demand)
Remainder to 'E1'.

Written by Philipp Meier <philipp.meier@eawag.ch>
(c) 2014 Eawag: Swiss Federal Institute of Aquatic Science and Technology
"""

from pynsim import Simulator

from agents.nodes import Reservoir
from agents.links import River
from agents.networks import ReservoirSystem

from engines.routing import SimpleRouting


timesteps = range(12)

# Nodes
J1 = Junction(x=2, y=1, name='J1')
J2 = Junction(x=2, y=2, name='J2')
J3 = Junction(x=1, y=3, name='J3')
J4 = Junction(x=3, y=3, name='J4')
J5 = Junction(x=3, y=4, name='J5')
J6 = Junction(x=3, y=5, name='J6')
J7 = Junction(x=3, y=6, name='J7')
U1 = Urban(x=0, y=3, name='U1')
F1 = Farmer(x=4, y=4, name='F1')
F2 = Farmer(x=4, y=5, name='F1')
F3 = Farmer(x=4, y=6, name='F1')
F4 = Farmer(x=1, y=4, name='F1')
E1 = Junction(x=3, y=7, name='E1')

# Links

         (J1)
          |
          |
      I--(J2) 
          /\
         /  \  
  (U1)-(J3) (J4)
        |    |
       (F4) (J5)--(F1)
             |
            (J6)--(F2)
             |
            (J7)--(F3)
             |
            (E1)

T1 = Transfer(start_node=J1, end_node=J2, name='J1_J2')
T2 = Transfer(start_node=J2, end_node=J3, name='J2_J3')
T3 = Transfer(start_node=J2, end_node=J4, name='J2_J4')
P1 = Pipeline(start_node=J3, end_node=U1, name='J3_U1')
P2 = Pipeline(start_node=J3, end_node=F4, name='J3_F4')
R1 = River(start_node=J4, end_node=J5, name='J4_J5')
R2 = River(start_node=J5, end_node=J6, name='J5_J6')
R3 = River(start_node=J6, end_node=J7, name='J6_J7')
R4 = River(start_node=J7, end_node=E1, name='J7_E1')
P3 = Pipeline(start_node=J5, end_node=F1, name='J5_F1')
P4 = Pipeline(start_node=J6, end_node=F2, name='J6_F2')
P5 = Pipeline(start_node=J7, end_node=F3, name='J7_F3')


# Node data

#J1
J1._inflow = {0: 100,
              1: 100,
              2: 100,
              3: 100,
              4: 110,
              5: 120,
              6: 140,
              7: 140,
              8: 140,
              9: 120,
              10: 100,
              11: 100,
              }
              
#J2
J2._inflow = {0: 120,
              1: 200,
              2: 300,
              3: 250,
              4: 180,
              5: 200,
              6: 180,
              7: 185,
              8: 200,
              9: 200,
              10: 245,
              11: 280,
              }
              
J2._Allocation = {0: 50, 50
                  1: 50, 50,
                  2: 65, 35,
                  3: 65, 35,
                  4: 70, 30,
                  5: 70, 30,
                  6: 65, 35,
                  7: 65, 35,
                  8: 65, 35,
                  9: 65, 35,
                  10: 65, 35,
                  11: 65, 35,
                  }

#J3 Allocation
J3._Allocation = {0: 90, 
                  1: 100, 
                  2: 100, 
                  3: 120, 
                  4: 140, 
                  5: 140, 
                  6: 140, 
                  7: 140, 
                  8: 120, 
                  9: 120, 
                  10: 100, 
                  11: 100, 
              }
R3._target_release = {0: 15,
                      1: 15,
                      2: 17,
                      3: 17,
                      4: 20,
                      5: 20,
                      6: 20,
                      7: 20,
                      8: 17,
                      9: 17,
                      10: 15,
                      11: 15,
                      }

#R4
R4.max_stor = 2e8
R4.min_stor = 1e7
R4.init_stor = R4.max_stor * 0.8
R4._inflow = {0: 4,
              1: 6,
              2: 7,
              3: 12,
              4: 17,
              5: 17,
              6: 22,
              7: 15,
              8: 12,
              9: 9,
              10: 6,
              11: 5,
              }
R4._target_release = {0: 45,
                      1: 45,
                      2: 45,
                      3: 55,
                      4: 55,
                      5: 55,
                      6: 65,
                      7: 65,
                      8: 65,
                      9: 45,
                      10: 45,
                      11: 45,
                      }

# Network
network = ReservoirSystem(name="Example reservoir system")
network.add_nodes(R1, R2, R3, R4)
network.add_links(L1, L2, L3)

network.timestep = 86400 * 30  # one month
network.tol = 0.1  # Tolerance value for mass balance error

# Simulation

simulation = Simulator()

simulation.set_timesteps(timesteps)

simulation.network = network

engine = SimpleRouting(network)

simulation.add_engine(engine)

simulation.start()

# Plot results
import seaborn
import matplotlib.pyplot as plt

plt.figure(1)
for i, node in enumerate(simulation.network.nodes):
    plt.subplot(2, 4, i + 1)
    plt.plot([timesteps[0], timesteps[-1]], [node.min_stor, node.min_stor], 'r')
    plt.plot([timesteps[0], timesteps[-1]], [node.max_stor, node.max_stor], 'r')
    plt.plot(node._history['S'], 'b')
    plt.ylim([0, node.max_stor])
    plt.xlim([timesteps[0], timesteps[-1]])
    plt.title('R%s storage' % (i + 1))
    plt.subplot(2, 4, i + 5)
    plt.plot(node._history['target_release'], 'r')
    plt.plot(node._history['actual_release'], 'b')
    plt.ylim(ymin=0)
    plt.xlim([timesteps[0], timesteps[-1]])
    plt.title('R%s release' % (i + 1))
    if i == 0:
        plt.legend(['Target release', 'Actual release'])

plt.show()
