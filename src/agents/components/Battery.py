from src.agents.components.Component import Component


class Battery(Component):
    """
    Describes a battery component within a spacecraft
    Is an implementation of the Abstract Components Class
    """
    def __init__(self, name, mass, power_output, power_capacity, dod, xdim=0, ydim=0, zdim=0):
        """
        :param name: component name
        :param mass: component's mass in [kg]
        :param power_output: how much power can be generated by this component when on in [W]
        :param power_capacity: how much power can be stored in this component in [J] aka [W*s]
        :param dod: battery's maximum depth of discharge in percentage values between 0 and 1
        :param xdim: component's dimension in the x-axis in [m]
        :param ydim: component's dimension in the y-axis in [m]
        :param zdim: component's dimension in the z-axis in [m]
        """
        super().__init__(name, False, mass=mass, xdim=xdim, ydim=ydim, zdim=zdim,
                         power_generation=power_output, power_usage=0, power_storage=power_capacity, power_capacity=power_capacity,
                         data_generation=0, data_usage=0, data_storage=0, data_capacity=0)
        self.max_output = power_output
        self.dod = dod

        if dod < 0 or dod > 1:
            raise Exception("Depth-of-Discharge can only be values between 0 and 1")

    def update_energy_storage(self, power_in=0, step_size=1) -> None:
        """
        Updates energy storage
        :param power_in:
        :param step_size:
        :return: None
        """
        power_out = 0
        if self.status:
            power_out = self.power_generation

        power_total = power_in - power_out
        self.power_storage += power_total*step_size

        if self.power_storage > self.power_capacity:
            self.power_storage = self.power_capacity
        elif self.power_storage/self.power_capacity < (1 - self.dod):
            # If battery is discharged below its dod, it will turn itself off and will only be able to be charged
            self.status = False

    def turn_on(self) -> None:
        """
        Turns on battery for discharge only if power storage is over depht-of-discharge
        :return: None
        """
        if self.power_storage/self.power_capacity > (1 - self.dod):
            self.status = True

    def is_full(self) -> bool:
        return self.power_storage >= self.power_capacity
